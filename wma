#!/usr/bin/env python3
# _*_ coding: utf-8 _*_
import os
import numpy as np
import time
from scipy import stats
import statistics as st
import weightedstats as ws
from collections import deque

from ryu.app import simple_switch_13
from ryu.controller import ofp_event
from ryu.controller.handler import MAIN_DISPATCHER, DEAD_DISPATCHER
from ryu.controller.handler import set_ev_cls
from ryu.lib import hub

dq1 = deque(maxlen=5)
dq2 = deque(maxlen=5)
dq3 = deque(maxlen=5)
dt = deque(maxlen=5)
d1 = deque(maxlen=5)
d2 = deque(maxlen=5)
d3 = deque(maxlen=5)



class SimpleMonitor13(simple_switch_13.SimpleSwitch13):

    def __init__(self, *args, **kwargs):
        super(SimpleMonitor13, self).__init__(*args, **kwargs)
        self.datapaths = {}
        self.monitor_thread = hub.spawn(self._monitor)

    @set_ev_cls(ofp_event.EventOFPStateChange, [MAIN_DISPATCHER, DEAD_DISPATCHER])
    def _state_change_handler(self, ev):
        datapath = ev.datapath
        if ev.state == MAIN_DISPATCHER:
            if datapath.id not in self.datapaths:
                self.logger.debug('register datapath: %016x', datapath.id)
                self.datapaths[datapath.id] = datapath
        elif ev.state == DEAD_DISPATCHER:
            if datapath.id in self.datapaths:
                self.logger.debug('unregister datapath: %016x', datapath.id)
                del self.datapaths[datapath.id]

    def _monitor(self):
        while True:
            for dp in self.datapaths.values():
                self._request_stats(dp)
            hub.sleep(5)

    def _request_stats(self, datapath):
        self.logger.debug('send stats request: %016x', datapath.id)
        ofproto = datapath.ofproto
        parser = datapath.ofproto_parser

        req = parser.OFPFlowStatsRequest(datapath)
        datapath.send_msg(req)

        req = parser.OFPPortStatsRequest(datapath, 0, ofproto.OFPP_ANY)
        datapath.send_msg(req)
    
    print('========================================================')
    @set_ev_cls(ofp_event.EventOFPPortStatsReply, MAIN_DISPATCHER)
    def port_stats_reply_handler(self, ev):
        global dq1, dq2, dq3, delta1, deltat
        msg = ev.msg
        datapath = msg.datapath
        
    # Extrair estatísticas  do switch oara configurar limiar    
        status = list(zip(*ev.msg.body))
        ports = list(zip(*ev.msg.body))[0]
        for i in [i for i,p in enumerate(ports) if p == 1]:
            dq1.append(status[4][i])
            dt.append(status[13][i])            
            
            if len(dq3) > 4:
                delta3 = dq3[-1] - dq3[-2]
                deltat = dt[-1] - dt[-2]
                t = [time.strftime("%Y%m%d%H%M%S")]
                bw = t + (int((delta1 * 8)/ (deltat)))
                d1.append(bw)
                d = np.asarray(d1)
                with open('bw.txt', 'a') as f: np.savetxt(f, np.c_[bw], fmt='%9d', delimiter=' ', newline=os.linesep)
                with open('d.txt', 'a') as f: np.savetxt(f, np.c_[d], fmt='%9d', delimiter=' ', newline=os.linesep)
                mmp_weights = [1, 2, 3, 4, 5]
                mmp1 = round(ws.weighted_mean(d1, weights=mmp_weights))
                np_mm = np.average(d1)
                np_var = np.var(d1)
                np_std = np.std(d1)
                np_error = stats.tsem(d1)
                print('***************************************************', d)                
                print('mm_np', np_mm, 'np_var', np_var, 'np_std', np_std, 'np_error', np_error)
    # Avaliação estatística 'real-time'                
                #mv_variance = d.var(d) # variância populacional
                #mv_desviop = d.std(d) # desvio padrão amostral
                
                mv_variance = round(st.pvariance(d1),5) # variância populacional
                mv_desviop = round(st.pstdev(d1), 5) # desvio padrão amostral
                mv_error = round(((mv_desviop) / (10 ** 0.5)), 5)
                error_percent = round(((mv_error) / 10000000), 5)
               
                print('******************************************Bandwidth =', bw)
                print('mmp1 =', mmp1, 'pvariance =', mv_variance,'desviop =', 
                      mv_desviop, 'error =', mv_error, 'error_percent =', error_percent)
    # Up/Down porta do servidor secundário
                ifname = 's1-eth2'
                ofp = datapath.ofproto
                ofp_parser = datapath.ofproto_parser
                port_no = 2
                addr_port = open('/sys/class/net/%s/address' % ifname).read()
                config = 0
                mask = (ofp.OFPPC_NO_FWD)
                if (bw <= 800000000):
                    config = ofp.OFPPC_NO_FWD
                    req_down = ofp_parser.OFPPortMod(datapath, port_no, addr_port, 
                                                     config, mask)
                    datapath.send_msg(req_down)# traffego apenas porta primaria
                    print('--------->Server2 DOWN in port =', addr_port)
                else:
                    req_up = ofp_parser.OFPPortMod(datapath, port_no, addr_port, 
                                                   config, mask)
                    datapath.send_msg(req_up)# trafego ativo para porta secundaria
                    print('--------->Server2 UP in port =', addr_port)
            else: continue
